#!/usr/bin/env node

// Parámetros de la aplicación
var nombreApp = "credenciales";
var puertoApp = "5000";

// Modo de ejecución
process.env.NODE_ENV = "development";
//process.env.NODE_ENV = "production";

// Importa módulos
var app = require('../app');
var debug = require('debug')(nombreApp + ":server");
var http = require('http');

// Establece y memoriza el puerto de escucha
var puerto = normalizarPuerto(process.env.PORT || puertoApp);
app.set('port', puerto);

// Crea el servidor HTTP
var server = http.createServer(app);

// Lanza el servidor
server.listen(puerto);
server.on('error', onError);
server.on('listening', onListening);

// Normaliza el puerto en número, string o false
function normalizarPuerto(valor) {
  // Convierte el valor pasado a un entero de base 10
  var _puerto = parseInt(valor, 10);

  // Analiza la conversion
  if (isNaN(_puerto)) {         // No ha funcionado
    // Si la conversión no ha funcionado
    // se devuelve el dato original
    _puerto = valor;
  } else if (_puerto < 0) {
    // Si la conversión ha funcionado pero el puerto
    // es negativo se devuelve el booleano "false"
    _puerto = false;
  }

  // Devuelve el puerto
  return _puerto;
}

// Listener del evento "error" del servidor HTTP
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // Construye el mensaje de error
  var bind = typeof puerto === 'string' ? 'Pipe ' + puerto : 'Port ' + puerto;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
  }
}

// Listener del evento "listening" del servidor HTTP
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
#!/usr/bin/env node

// Parámetros de la aplicación
var nombreApp = "quiz-4130";
var puertoApp = "5000";

// Modo de ejecución
process.env.NODE_ENV = "development";
//process.env.NODE_ENV = "production";

// Importa módulos
var app = require('../app');
var debug = require('debug')(nombreApp + ":server");
var http = require('http');

// Establece y memoriza el puerto de escucha
var puerto = normalizarPuerto(process.env.PORT || puertoApp);
app.set('port', puerto);

// Crea el servidor HTTP
// ---
// https://nodejs.org/api/http.html#http_http_createserver_requestlistener
// http.createServer([requestListener])
// Returns a new instance of http.Server.
// The requestListener is a function which is automatically added 
// to the 'request' event, so that is called every time a client 
// makes a request to the server
// ---
// https://nodejs.org/api/http.html#http_class_http_server
// Class: http.Server
// This is an EventEmitter with the following event:
//  > Event: 'request' --> #function (request, response) { }
//    Emitted each time there is a request. 
//    Note that there may be multiple requests per connection 
//    (in the case of keep-alive connections). 
//    - request is an instance of http.IncomingMessage 
//    - response is an instance of http.ServerResponse.
//  > ...
// ---
// The app returned by express() is in fact a JavaScript Function, 
// designed to be passed to Node’s HTTP servers as a callback to 
// handle requests. 
// This makes it easy to provide both HTTP and HTTPS versions of 
// your app with the same code base, as the app does not inherit 
// from these (it is simply a callback)
// ---
// The callback function you pass to http.createServer (app) 
// The callback should take two parameters:
//  > a request
//  > a response
// and send back HTML or some other output to the client.
var server = http.createServer(app);

// Lanza el servidor
server.listen(puerto);
server.on('error', onError);
server.on('listening', onListening);

// Normaliza el puerto en número, string o false
function normalizarPuerto(valor) {
  // Convierte el valor pasado a un entero de base 10
  var _puerto = parseInt(valor, 10);

  // Analiza la conversion
  if (isNaN(_puerto)) {         // No ha funcionado
    // Si la conversión no ha funcionado
    // se devuelve el dato original
    _puerto = valor;
  } else if (_puerto < 0) {
    // Si la conversión ha funcionado pero el puerto
    // es negativo se devuelve el booleano "false"
    _puerto = false;
  }

  // Devuelve el puerto
  return _puerto;
}

// Listener del evento "error" del servidor HTTP
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // Construye el mensaje de error
  var bind = typeof puerto === 'string' ? 'Pipe ' + puerto : 'Port ' + puerto;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
  }
}

// Listener del evento "listening" del servidor HTTP
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log("Aplicación " + nombreApp + " escuchando en puerto " + puertoApp + "\n");
}